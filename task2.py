import openai
import os
from dotenv import load_dotenv

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

full_history = [
    {"role": "system", "content": "–¢–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —á—ñ—Ç–∫–æ —ñ –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–æ."}
]

print("–ß–∞—Ç –∑ –æ–±–º–µ–∂–µ–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (3 –æ—Å—Ç–∞–Ω–Ω—ñ –ø–∞—Ä–∏). –ù–∞–ø–∏—à–∏ '–≤–∏—Ö—ñ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")

while True:
    user_input = input("üë§ –í–∏: ")

    if user_input.strip().lower() in ["–≤–∏—Ö—ñ–¥", "exit", "quit"]:
        print("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
        break

    full_history.append({"role": "user", "content": user_input})

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –ø–∞—Ä–∏ user + assistant (–≤—Å—å–æ–≥–æ –¥–æ 6 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
    last_pairs = []
    for msg in reversed(full_history[1:]):  # –±–µ–∑ system
        if msg["role"] in ["user", "assistant"]:
            last_pairs.insert(0, msg)
        if len(last_pairs) == 6:
            break

    # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ system + –æ—Å—Ç–∞–Ω–Ω—ñ 3 –ø–∞—Ä–∏
    context = [full_history[0]] + last_pairs

    print("\n–ö–æ–Ω—Ç–µ–∫—Å—Ç, —â–æ –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –≤ API:")
    for m in context:
        role = "–í–∏" if m["role"] == "user" else "ChatGPT" if m["role"] == "assistant" else "–°–∏—Å—Ç–µ–º–∞"
        print(f"{role}: {m['content']}")
    print("------")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=context
        )

        reply = response['choices'][0]['message']['content']
        print("ChatGPT:", reply)

        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        full_history.append({"role": "assistant", "content": reply})

    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞:", e)
